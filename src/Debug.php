<?php
/**
 *
 * @version 1.0.0
 * @author Gabriel David <gabriel.david@play-zone.ro>
 *
 */

namespace Tripsy\Library;

use Illuminate\Container\Container;
use Tripsy\Library\Database\DatabaseException;
use Tripsy\Library\Database\Sql;
use Tripsy\Library\Exceptions\EmailException;
use Tripsy\Library\Exceptions\TemplateException;
use Tripsy\Library\Log\LogDatabase;
use Tripsy\Library\Log\LogException;
use Tripsy\Library\Log\LogFile;

class Debug
{
    private Config $cfg;

    public function __construct(Config $cfg)
    {
        $this->cfg = $cfg;

        if ($this->enable() === false && in_array(var_server('REMOTE_ADDR'), $this->cfg->get('debug.ip'))) {
            $this->cfg->set('debug.status', true);
        }

        if ($this->enable() === true) {
            $this->cfg->set('debug.sql', true); //enable sql debug
            $this->cfg->set('debug.version', time()); //enable version for assets
            $this->cfg->set('debug.maintenance', false); //disable maintenance
        } else {
            $this->cfg->set('debug.redirect', false); //turn off redirect debug
        }

        if ($this->enable() === true) {
            ini_set('display_errors', 1);
        } else {
            ini_set('display_errors', 0);
        }

        $this->maintenance();
    }

    public function enable(): bool
    {
        return $this->cfg->get('debug.status');
    }

    public function maintenance(bool $enable = false, array $vars = []): void
    {
        if ($enable === false) {
            $enable = $this->cfg->get('debug.maintenance');
        }

        if ($enable === true) {
            if (empty($vars)) {
                $vars = $this->templateVars();
            }

            try {
                template($this->cfg->get('folder.root') . $this->cfg->get('folder.templates') . '/' . 'maintenance.html', 'file_absolute')
                    ->assign($vars)
                    ->output();
            } catch (TemplateException) {
                echo 'Sorry, something is wrong. A team of trained bunnies will fix this soon. Please come back later';
            }

            exit();
        }
    }

    /**
     * @param $var
     * @param string $name
     * @param bool $print //when `true` display even if debug is disabled
     * @param string $mode //echo || string
     * @param bool $exit //stop after echo
     * @return string|void
     */
    public function output($var, string $name = '', bool $print = false, string $mode = 'echo', bool $exit = false)
    {
        if ($print === false && $this->enable() === false) {
            return '';
        }

        $name = $name ? '<strong>' . $name . '</strong> ::: ' : '';

        if (is_array($var)) {
            $output = print_r($var, true);
        } elseif (is_object($var)) {
            ob_start();
            var_dump($var);
            $output = ob_get_contents();
            ob_end_clean();
        } else {
            $output = $var . '<br />';
        }

        if ($mode == 'echo') {
            echo '<pre>' . $name . $output . '</pre>';

            if ($exit) {
                exit();
            }
        } else {
            return '<pre>' . $name . $output . '</pre>';
        }
    }

    public function handlerError($err_number, $err_desc, $err_file, $err_line): void
    {
        $err_code_arr = array(
            1 => array(
                'code' => 'E_ERROR',
                'info' => 'Fatal Error',
                'desc' => 'Fatal run-time errors. These indicate errors that can not be recovered from, such as a memory allocation problem. Execution of the script is halted.'
            ),
            2 => array(
                'code' => 'E_WARNING',
                'info' => 'Warning',
                'desc' => 'Run-time warnings (non-fatal errors). Execution of the script is not halted.'
            ),
            4 => array(
                'code' => 'E_PARSE',
                'info' => 'Parse Error',
                'desc' => 'Compile-time parse errors. Parse errors should only be generated by the parser.'
            ),
            8 => array(
                'code' => 'E_NOTICE',
                'info' => 'Notice',
                'desc' => 'Run-time notices. Indicate that the script encountered something that could indicate an error, but could also happen in the normal course of running a script.'
            ),
            16 => array(
                'code' => 'E_CORE_ERROR',
                'info' => 'Fatal Core Error',
                'desc' => 'Fatal errors that occur during PHP\'s initial startup. This is like an E_ERROR, except it is generated by the core of PHP.'
            ),
            32 => array(
                'code' => 'E_CORE_WARNING',
                'info' => 'Core Warning',
                'desc' => 'Warnings (non-fatal errors) that occur during PHP\'s initial startup. This is like an E_WARNING, except it is generated by the core of PHP'
            ),
            64 => array(
                'code' => 'E_COMPILE_ERROR',
                'info' => 'Compilation Error',
                'desc' => 'Fatal compile-time errors. This is like an E_ERROR, except it is generated by the Zend Scripting Engine.'
            ),
            128 => array(
                'code' => 'E_COMPILE_WARNING',
                'info' => 'Compilation Warning',
                'desc' => 'Compile-time warnings (non-fatal errors). This is like an E_WARNING, except it is generated by the Zend Scripting Engine.'
            ),
            256 => array(
                'code' => 'E_USER_ERROR',
                'info' => 'Triggered Error',
                'desc' => 'User-generated error message. This is like an E_ERROR, except it is generated in PHP code by using the PHP function trigger_error().'
            ),
            512 => array(
                'code' => 'E_USER_WARNING',
                'info' => 'Triggered Warning',
                'desc' => 'User-generated warning message. This is like an E_WARNING, except it is generated in PHP code by using the PHP function trigger_error().'
            ),
            1024 => array(
                'code' => 'E_USER_NOTICE',
                'info' => 'Triggered Notice',
                'desc' => 'User-generated notice message. This is like an E_NOTICE, except it is generated in PHP code by using the PHP function trigger_error().'
            ),
            2048 => array(
                'code' => 'E_STRICT',
                'info' => 'Suggestion Changes',
                'desc' => 'Enable to have PHP suggest changes to your code which will ensure the best interoperability and forward compatibility of your code.'
            ),
            4096 => array(
                'code' => 'E_RECOVERABLE_ERROR',
                'info' => 'Catchable Fatal Error',
                'desc' => 'Catchable fatal error. It indicates that a probably dangerous error occurred, but did not leave the Engine in an unstable state. If the error is not caught by a user defined handle (see also set_handlerError()), the application aborts as it was an E_ERROR.'
            ),
            8192 => array(
                'code' => 'E_DEPRECATED',
                'info' => 'Deprecated Code',
                'desc' => 'Run-time notices. Enable this to receive warnings about code that will not work in future versions.'
            ),
            16384 => array(
                'code' => 'E_USER_DEPRECATED',
                'info' => 'Triggered Deprecated Code',
                'desc' => 'User-generated warning message. This is like an E_DEPRECATED, except it is generated in PHP code by using the PHP function trigger_error().'
            ),
            32767 => array(
                'code' => 'E_ALL',
                'info' => 'Errors and warnings',
                'desc' => 'All errors and warnings, as supported, except of level E_STRICT'
            )
        );

        //prevent error reporting when using the control operator @
        if (error_reporting() === 0) {
            return;
        }

        $error_info = array(
            'Server' => array(
                'site' => var_server('HTTP_HOST'),
                'request_uri' => var_server('REQUEST_URI'),
            ),
            'Code' => $err_code_arr[$err_number]['code']
        );

        $trace = debug_backtrace();

        unset($trace[0]);

        $error_info['Trace'] = $this->buildDebugTrace($trace);

        array_unshift($error_info['Trace'], [
            'file' => '<span style="font-weight: bold; color: #ff6600">' . $err_file . '</span>',
            'line' => '<span style="font-weight: bold; color: #ff6600">' . $err_line . '</span>',
            'error' => '<span style="font-weight: bold; color: #ff6600">' . $err_desc . '</span>',
        ]);

        $error_info['POST'] = $_POST;
        $error_info['GET'] = $_GET;

        $maintenance = !in_array($err_number, [2, 8]);

        $this->report($error_info, 'email', $maintenance);
    }

    public function handlerException($e)
    {
        $error_info = array(
            'Server' => array(
                'site' => var_server('HTTP_HOST'),
                'request_uri' => var_server('REQUEST_URI'),
            ),
            'Exception' => get_class($e)
        );

        $error_info['Trace'] = $this->buildDebugTrace($e->getTrace());

        array_unshift($error_info['Trace'], [
            'file' => '<span style="font-weight: bold; color: #ff6600">' . $e->getFile() . '</span>',
            'line' => '<span style="font-weight: bold; color: #ff6600">' . $e->getLine() . '</span>',
            'error' => '<span style="font-weight: bold; color: #ff6600">' . $e->getMessage() . '</span>',
        ]);

        $error_info['POST'] = $_POST;
        $error_info['GET'] = $_GET;

        $this->report($error_info);
    }

    private function buildDebugTrace(array $trace): array
    {
        $output = [];

        foreach ($trace as $v) {
            $file = $v['file'] ?? '';

            if (str_starts_with($file, $this->cfg->get('path.vendor'))) {
                continue;
            }

            $trigger = [];

            if (isset($v['class']))
                $trigger[] = $v['class'];

            if (isset($v['function']))
                $trigger[] = $v['function'];

            $output[] = [
                'file' => $file,
                'line' => $v['line'] ?? '',
                'trigger' => implode('::', $trigger),
            ];
        }

        return $output;
    }

    private function templateVars(): array
    {
        return [
            'site_link' => $this->cfg->get('link.site'),
            'site_name' => $this->cfg->get('site.name'),
            'path_template' => $this->cfg->get('folder.root') . $this->cfg->get('folder.templates') . $this->cfg->get('pattern.' . $this->cfg->get('default.pattern') . '.folder'),
        ];
    }

    public function report(array $data, string $mode = 'email', $maintenance = true): void
    {
        if ($this->enable() === true) {
            $this->output($data, '', true, 'echo', true);
        }

        $file_template = $this->cfg->get('folder.root') . $this->cfg->get('folder.templates') . '/' . 'report.html';
        $content = $this->output($data, '', true, 'string');
        $vars = $this->templateVars();

        if (file_exists($file_template)) {
            try {
                $content = template($file_template, 'file_absolute')
                    ->assign('date', date('d-M-Y H:i'))
                    ->assign('content', $content)
                    ->assign($vars)
                    ->parse();
            } catch (TemplateException) {
                //do nothing
            }
        }

        if ($mode == 'email') {
            try {
                Container::getInstance()->makeWith(Emailer::class, [
                    'from.email' => $this->cfg->get('mail.from.email'),
                    'from.name' =>  $this->cfg->get('mail.from.name'),
                    'smtp.host' => $this->cfg->get('mail.smtp.host'),
                    'smtp.port' => $this->cfg->get('mail.smtp.port'),
                    'smtp.username' => $this->cfg->get('mail.smtp.username'),
                    'smtp.password' => $this->cfg->get('mail.smtp.password'),
                    'debug' => $this->cfg->get('mail.debug'),
                ])
                    ->addTo($this->cfg->get('debug.report.email'))
                    ->setSubject($this->cfg->get('debug.report.subject'))
                    ->setContent($content)
                    ->setVars($vars)
                    ->send();
            } catch (EmailException $e) {
                try {
                    Container::getInstance()->make(LogDatabase::class)->debug($e->getMessage(), [
                        'file' => __FILE__,
                        'line' => __LINE__,
                    ]);
                } catch (DatabaseException $e) {
                    try {
                        Container::getInstance()->makeWith(LogFile::class, ['pathLogs' => $this->cfg->get('path.logs')])->debug($e->getMessage(), [
                            'file' => __FILE__,
                            'line' => __LINE__,
                        ]);
                    } catch (LogException) {
                        //can't do anything
                    }
                }
            }
        }

        $this->maintenance($maintenance, $vars);
    }

    public function panel(Sql $sql): string
    {
        if ($this->enable() === false) {
            return '';
        }

        $includes = function (): string {
            $includes = get_included_files();

            $output = '';

            foreach ($includes as $key => $value) {
                $index = $key + 1;

                $output .= str_repeat(' ', (3 - strlen($index))) . '[' . $index . ']' . ' => ' . $value . '<br />';
            }

            return str_replace($this->cfg->get('folder.root'), '', $output);
        };

        $sql_data = $sql->debugData();
        $sql_data = array_map(function($v) {
            return str_replace($this->cfg->get('folder.root'), '', $v);
        }, $sql_data);

        return template($this->cfg->get('folder.root') . $this->cfg->get('folder.templates') . '/' . 'debug.html', 'file_absolute')
            ->assign('loadTime', round(microtime(true) - $this->cfg->get('debug.time'), 4))
            ->assign('memory_usage', number_format((memory_get_usage(false) / (1024 * 1024)), 2))
            ->assign('sql_data', $sql_data)
            ->assign('array_cookie', $this->output($_COOKIE, '_COOKIE', true, 'string'))
            ->assign('array_get', $this->output($_GET, '_GET', true, 'string'))
            ->assign('array_post', $this->output($_POST, '_POST', true, 'string'))
            ->assign('array_files', $this->output($_FILES, '_FILES', true, 'string'))
            ->assign('includes', $includes())
            ->assign('php_version', phpversion())
            ->assign('site', var_server('HTTP_HOST'))
            ->assign('script', var_server('SCRIPT_FILENAME'))
            ->assign('serverTime', date('Y-m-d H:i'))
            ->assign('fileTime', date('Y-m-d H:i', filemtime(var_server('SCRIPT_FILENAME'))))
            ->parse();
    }
}
